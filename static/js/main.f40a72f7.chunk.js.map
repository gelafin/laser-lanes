{"version":3,"sources":["Game.js","reportWebVitals.js","index.js"],"names":["infiniteShipIdGenerator","randomInt","min","max","Math","floor","random","Ship","props","enemyImgUrl","allyImgUrl","isAlly","className","Laser","laserState","state","src","imageSource","ShipRow","ships","console","log","getState","shipRow","map","ship","getId","OutputArea","outputString","output","outputChars","Array","from","idGenerator","reactKeys","values","outputCharPs","char","index","column","next","value","outputCharKeys","InputArea","handleChange","bind","event","this","onInputChange","target","type","input","onChange","React","Component","idHalf","toString","ShipObject","id","alive","Game","maxColumns","maxRows","allLanes","keys","shipIdGenerator","allyShips","fill","enemyShips","allyShipStates","firingShips","chargingShips","idleShips","enemyShipStates","handleInputChange","tick","advanceShipState","lane","newState","advanceState","shipStateGroup","push","pop","sfx","explosion","play","catch","setState","randomIdleAllyLane","length","randomIdleEnemyLane","newAllyShips","newEnemyShips","timerID","setInterval","Audio","chargingLaser","firingLaser","volume","clearInterval","MAX_COLUMNS","element","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.f40a72f7.chunk.js","sourcesContent":["import React from 'react';\nimport './master.css';\n\nfunction randomInt(min, max) {\n  return Math.floor(Math.random() * (max - min) ) + min;\n}\n\nfunction Ship(props) {\n  const enemyImgUrl = 'https://live.staticflickr.com/65535/50724769872_da72a3fd7c_t.jpg';\n  const allyImgUrl = 'https://live.staticflickr.com/65535/50724684336_aaa14d5649_t.jpg';\n\n  if (!props.isAlly) {  // enemy ships have lasers below them\n    return (\n      <div className=\"ship\">\n        <img\n          src={ props.isAlly ? allyImgUrl : enemyImgUrl }\n        />\n        <Laser isAlly = {false} laserState={props.state} />\n      </div>\n    );  \n  } else {\n    return (\n      <div className=\"ship\">\n        <Laser isAlly = {true} laserState={props.state} />\n        <img\n          src={ props.isAlly ? allyImgUrl : enemyImgUrl }\n        />\n      </div>\n    );\n  }\n}\n\nfunction Laser(props) {  \n  // url variables\n  const allyChargingLaserUrl = 'https://live.staticflickr.com/65535/50723947808_9809886476_t.jpg';\n  const allyFiringLaserUrl = 'https://live.staticflickr.com/65535/50724684431_bffd593096_t.jpg';\n  const enemyChargingLaserUrl = 'https://live.staticflickr.com/65535/50724684381_4ca6f500da_t.jpg';\n  const enemyFiringLaserUrl = 'https://live.staticflickr.com/65535/50723947768_2ab5054c24_t.jpg';\n  \n  let laserState = props.laserState;\n  const isAlly = props.isAlly;\n  let imageSource;\n  \n  // decide which image to use\n  if (laserState === 'charging') {\n    if (isAlly) {\n      imageSource = allyChargingLaserUrl;\n    } else {\n      imageSource = enemyChargingLaserUrl;\n    }\n  } else if (laserState === 'firing') {\n    if (isAlly) {\n      imageSource = allyFiringLaserUrl;\n    } else {\n      imageSource = enemyFiringLaserUrl;\n    }\n  } else {  // laserState is idle\n    return (\n      <div className=\"laser\"></div>  // empty space with the appropriate width\n    );\n  }\n  \n  // laser isn't idle, so return the charging or firing image\n  return (\n    <img src={imageSource} className=\"laser\" />\n  );    \n}\n\nfunction ShipRow(props) {\n  // debugging\n  if (props.ships[0].isAlly) {\n    console.log('          in ShipRow ', props.ships[0].getState());\n  }\n\n  const shipRow = props.ships.map((ship) => \n    <Ship isAlly={ship.isAlly} state={ship.getState()} key={ship.getId()} />  // need column #?\n  );\n\n  return (\n      <ul className=\"game-row\">{shipRow}</ul>\n  );\n}\n\nfunction OutputArea(props) {\n    // make char array from input string\n    const outputString = props.output;\n    const outputChars = Array.from(outputString);\n\n    // prepare a generator of IDs for key prop\n    const idGenerator = props.reactKeys.values();\n    const outputCharPs = outputChars.map((char, index) => \n      <div column={index} key={idGenerator.next().value} >{char}</div>\n    );\n    const keys = props.outputCharKeys;\n  \n    return (\n      <div className=\"output-container\">\n        <ul className=\"game-text game-row\">{outputCharPs}</ul>\n      </div>\n    );\n}\n\nclass InputArea extends React.Component {\n  constructor(props) {\n    super(props);\n    this.handleChange = this.handleChange.bind(this);\n  }\n\n  handleChange(event) {\n    this.props.onInputChange(event.target.value);\n  }\n  \n  render() {\n    return (\n      <form className=\"input-container game-text-container flex-container\">\n        <input\n          type=\"text\"\n          value={this.props.input}\n          className=\"input-box game-text\"\n          onChange={this.handleChange} />\n      </form>\n    );    \n  }\n}\n\nfunction * infiniteShipIdGenerator() {\n  let idHalf = 0;\n  while(true) {\n    yield 'ship' + (idHalf++).toString();\n  }\n}\n\nclass ShipObject {\n  constructor(isAlly, id) {\n    this.alive = true;\n    this.state = 'idle';\n    this.id = id;\n    this.isAlly = isAlly;\n  }\n\n  getState() {\n    return this.state;\n  }\n\n  getId() {\n    return this.id;\n  }\n\n  advanceState() {\n    if (this.state === 'idle') {\n      console.log('in ShipObject::advanceState(): is idle, will charge');\n      this.state = 'charging';\n      return this.state;\n    } else if (this.state === 'charging') {\n      console.log('in ShipObject::advanceState(): is charging, will fire');\n      this.state = 'firing';\n      return this.state;\n    } else {\n      console.log('in ShipObject::advanceState(): is firing, will idle');\n      this.state = 'idle';\n      return this.state;\n    }\n  }\n}\n\nclass Game extends React.Component {\n  constructor(props) {\n    super(props);\n\n    const maxColumns = 7;\n    const maxRows = 5;\n\n    this.maxColumns = maxColumns;\n    this.maxRows = maxRows;\n    const allLanes = Array.from(new Array(maxColumns).keys());\n\n    const shipIdGenerator = infiniteShipIdGenerator();\n\n    this.state = {\n      input: 'testt',\n      allyShips: new Array(maxColumns).fill().map(() => {return new ShipObject(true, shipIdGenerator.next().value)}),\n      enemyShips: new Array(maxColumns).fill().map(() => {return new ShipObject(false, shipIdGenerator.next().value)}),\n\n      // track lane number of each ship in a state. Updated by advanceShipState\n      allyShipStates: {\n        firingShips: new Array(),\n        chargingShips: new Array(),\n        idleShips: Array.from(allLanes)\n      },\n      enemyShipStates: {\n        firingShips: new Array(),\n        chargingShips: new Array(),\n        idleShips: Array.from(allLanes)\n      }\n    };\n\n    this.handleInputChange = this.handleInputChange.bind(this);\n    this.tick = this.tick.bind(this);\n    this.advanceShipState = this.advanceShipState.bind(this);\n  }\n  \n  advanceShipState(ships, lane) {\n    // call the ship object's advanceState and update the Game state lists of all firing, charging, and idle lasers\n    const newState = ships[lane].advanceState();\n    const shipStateGroup = ships[lane].isAlly ? 'allyShipStates' : 'enemyShipStates';\n\n    if (newState === 'idle') {\n      this.state[shipStateGroup].idleShips.push(lane);\n      this.state[shipStateGroup].firingShips.pop(lane);\n    } else if (newState === 'charging') {\n      this.state[shipStateGroup].chargingShips.push(lane);\n      this.state[shipStateGroup].idleShips.pop(lane);\n    } else {\n      this.state[shipStateGroup].firingShips.push(lane);\n      this.state[shipStateGroup].chargingShips.pop(lane);\n    }\n  }\n\n  tick() {\n    console.log('******ticking');\n    // test\n    this.sfx.explosion.play().catch(()=>{console.log('*****ERROR: audio play() promise rejected. Click into the text box--or else this is localhost');});\n\n    this.setState((state) => {\n      // advance states of all charging and firing ships\n        // for any ships that just fired, process a laser fire\n          // check if there is a vowel or consonant in that lane\n          // if cons, it was blocked. Change laser state to idle\n          // if vowel, it hits. Tell the opposite ship that it got hit (in Game, play explosion and change Game.ships[targetShip].isAlive to false. In Ship, show incoming beam then display an empty div)\n\n      // advance the state of 1 random idle laser per side to charging\n      const randomIdleAllyLane = randomInt(0, state.allyShipStates.idleShips.length);\n      const randomIdleEnemyLane = randomInt(0, state.enemyShipStates.idleShips.length);\n\n      let newAllyShips = [...state.allyShips];\n      this.advanceShipState(newAllyShips, randomIdleAllyLane);\n      console.log('     in setState(): setting state with this new ally ship: ', newAllyShips[randomIdleAllyLane], ' in lane ', randomIdleAllyLane);\n\n      let newEnemyShips = [...state.enemyShips];\n      this.advanceShipState(newEnemyShips, randomIdleEnemyLane);\n      console.log('     in setState(): setting state with this new enemy ship: ', newAllyShips[randomIdleEnemyLane], ' in lane ', randomIdleEnemyLane);\n\n      return {allyShips: newAllyShips, enemyShips: newEnemyShips};\n    }, ()=>{console.log(' > finished setState!');});\n  }\n  \n  componentDidMount() {\n    this.timerID = setInterval(\n      () => this.tick(),\n      10000\n    );\n\n    // load sfx (should only load these once, then play them as needed)\n    this.sfx = {\n      explosion: new Audio('./sfx/explosion.mp3'),\n      chargingLaser: new Audio('./sfx/charging_laser.mp3'),\n      firingLaser: new Audio('./sfx/firing_laser.mp3'),\n    };\n\n    // balance audio\n    this.sfx.explosion.volume = 0.1;\n    this.sfx.chargingLaser.volume = 0.1;\n  }\n  \n  componentWillUnmount() {\n    clearInterval(this.timerID);\n  }\n  \n  handleInputChange(value) {\n    this.setState({input: value});\n    console.log('set input to ', value);\n  }\n  \n  render() {\n    const MAX_COLUMNS = this.maxColumns;\n\n    // make keys required by React for lists of elements. TODO: use something more unlimited, since player can type outside of play area. Else, just restrict typing and give up on validating words\n    const outputCharKeys = new Array(MAX_COLUMNS).fill(0).map((element, index) => index);\n\n    console.log('     in render(): rendering shiprow with ', this.state.allyShips[0].getState());\n    return (\n      <div className=\"game-container flex-container\">\n\n        <div className=\"visuals-container\">\n          <ShipRow ships={this.state.enemyShips} />\n          <OutputArea output={this.state.input} reactKeys={outputCharKeys} />\n          <ShipRow ships={this.state.allyShips} />\n        </div>\n\n        <div>\n          <InputArea input={this.state.input} onInputChange={this.handleInputChange} />\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Game;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport Game from './Game';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <Game />,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}